// Code generated by moshi-kotlin-codegen. Do not edit.
package com.adsamcik.signalcollector.tracker.data.collection

import com.adsamcik.signalcollector.common.data.*
import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonDataException
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Long
import kotlin.String

class MutableCollectionDataJsonAdapter(moshi: Moshi) : JsonAdapter<MutableCollectionData>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("time", "location", "activity", "cell", "wifi")

    private val longAdapter: JsonAdapter<Long> =
            moshi.adapter<Long>(Long::class.java, kotlin.collections.emptySet(), "time")

    private val nullableLocationAdapter: JsonAdapter<Location?> =
            moshi.adapter<Location?>(Location::class.java, kotlin.collections.emptySet(), "location")

    private val nullableActivityInfoAdapter: JsonAdapter<ActivityInfo?> =
            moshi.adapter<ActivityInfo?>(ActivityInfo::class.java, kotlin.collections.emptySet(), "activity")

    private val nullableCellDataAdapter: JsonAdapter<CellData?> =
            moshi.adapter<CellData?>(CellData::class.java, kotlin.collections.emptySet(), "cell")

    private val nullableWifiDataAdapter: JsonAdapter<WifiData?> =
            moshi.adapter<WifiData?>(WifiData::class.java, kotlin.collections.emptySet(), "wifi")

    override fun toString(): String = "GeneratedJsonAdapter(MutableCollectionData)"

    override fun fromJson(reader: JsonReader): MutableCollectionData {
        var time: Long? = null
        var location: Location? = null
        var locationSet: Boolean = false
        var activity: ActivityInfo? = null
        var activitySet: Boolean = false
        var cell: CellData? = null
        var cellSet: Boolean = false
        var wifi: WifiData? = null
        var wifiSet: Boolean = false
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 -> time = longAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'time' was null at ${reader.path}")
                1 ->  {
                    location = nullableLocationAdapter.fromJson(reader)
                    locationSet = true
                }
                2 ->  {
                    activity = nullableActivityInfoAdapter.fromJson(reader)
                    activitySet = true
                }
                3 ->  {
                    cell = nullableCellDataAdapter.fromJson(reader)
                    cellSet = true
                }
                4 ->  {
                    wifi = nullableWifiDataAdapter.fromJson(reader)
                    wifiSet = true
                }
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = MutableCollectionData()
        result = result.copy(
                time = time ?: result.time,
                location = if (locationSet) location else result.location,
                activity = if (activitySet) activity else result.activity,
                cell = if (cellSet) cell else result.cell,
                wifi = if (wifiSet) wifi else result.wifi)
        return result
    }

    override fun toJson(writer: JsonWriter, value: MutableCollectionData?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("time")
        longAdapter.toJson(writer, value.time)
        writer.name("location")
        nullableLocationAdapter.toJson(writer, value.location)
        writer.name("activity")
        nullableActivityInfoAdapter.toJson(writer, value.activity)
        writer.name("cell")
        nullableCellDataAdapter.toJson(writer, value.cell)
        writer.name("wifi")
        nullableWifiDataAdapter.toJson(writer, value.wifi)
        writer.endObject()
    }
}
